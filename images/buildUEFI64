#! /bin/bash
set -x
. conf

# Build a custom UEFI linux based PBA image
VERSIONINFO="$(git describe --dirty)" || VERSIONINFO='tarball'
BUILDTYPE='UEFI64'
BUILDIMG="$BUILDTYPE-$VERSIONINFO.img"

function die {
    echo 'Prereqs not available'
    exit 1
}

# Check if running as root
# Reuired by losetup(8)
if [ $(id -u) -ne 0 ]; then
    echo 'Must be run as root!'
    exit 1
fi

# Check prereqs
[ -f scratch/$SYSLINUX/efi64/efi/syslinux.efi ]                     || die
[ -f scratch/$SYSLINUX/efi64/com32/elflink/ldlinux/ldlinux.e64 ]    || die
[ -f scratch/buildroot/64bit/images/bzImage ]                       || die
[ -f scratch/buildroot/64bit/images/rootfs.cpio.xz ]                || die
[ -f scratch/buildroot/64bit/target/sbin/linuxpba ]                 || die
[ -f scratch/buildroot/64bit/target/sbin/sedutil-cli ]              || die
[ -f buildroot/syslinux.cfg ]                                       || die
echo "Building $BUILDTYPE image"
  
# Clean slate
rm -rf $BUILDTYPE
mkdir $BUILDTYPE
cd $BUILDTYPE

# Create image file and loopback device
dd if=/dev/zero of=$BUILDIMG bs=1M count=32
sfdisk $BUILDIMG < ../layout.sfdisk
LOOPDEV=$(losetup --show -f -o 1048576 $BUILDIMG)
mkfs.vfat $LOOPDEV -n $BUILDTYPE

# Mount the image
mkdir image
mount $LOOPDEV image
chmod 644 image

# Copy the system onto the image
mkdir -p image/EFI/boot
cp ../scratch/$SYSLINUX/efi64/efi/syslinux.efi image/EFI/boot/bootx64.efi
cp ../scratch/$SYSLINUX/efi64/com32/elflink/ldlinux/ldlinux.e64 image/EFI/boot/
cp ../scratch/buildroot/64bit/images/bzImage image/EFI/boot/
cp ../scratch/buildroot/64bit/images/rootfs.cpio.xz image/EFI/boot/
cp ../buildroot/syslinux.cfg image/EFI/boot/

# Clean up
umount image
losetup -d $LOOPDEV
gzip $BUILDIMG
